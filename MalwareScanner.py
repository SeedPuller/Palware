import subprocess
import re
import sys
import smtplib
import os
# setting necessary vars
colors = {"g":"\033[32m","n":"\033[m","r":"\033[31m","w":"\033[37m","o":"\033[33m"}
print('%s  ┌─────────────────────┐\n  │                     │\n  │m     m m    m  mmmm │\n  │#  #  # ##  ## #"   "│\n  │" #"# # # ## # "#mmm │\n  │ ## ##" # "" #     "#│\n  │ #   #  #    # "mmm#"│\n  │                     │\n  │                     │\n  └─────────────────────┘%s' % (colors["r"], colors["n"]))
print(" %s [+]  Web Malware Scanner Ver 1.5\n\n%s" % (colors["g"], colors["n"]))
directory = ""
internal = ""
unsafef = ""
uploadfunc = ""
uploadform = ""
filemanage = ""
extensions = ""
emailV = False
usern = ""
pasw = ""
dest = ""
maldo = "log"
mal_move_dest = ""
filename = "mal_detect.py"

# defining functions


def saveopt(conf_path):  # saving options in 'conf_path'
    if os.path.isfile(conf_path):
        os.remove(conf_path)  # if option has been exsits , remove it to save new options
    savefile = open(conf_path, "w")
    if savefile.write("directory:{0}\ninternal:{1}\nunsafe-func:{2}\nuploadfunc:{3}\nuploadform:{4}\nfilemanage:{5}\nextenstion:{6}\nemailV:{7}\nusern:{8}\npasswd:{9}\ndest:{10}\nmaldo:{11}\nmal_move_dest:{12}".format(directory, internal, unsafef, uploadfunc, uploadform, filemanage, extensions, emailV, usern, pasw, dest, maldo, mal_move_dest)):
        return True
    else:
        return False


def loadopt(conf_path):  # load options from 'conf_path'
    global directory, internal, unsafef, uploadfunc, uploadform, filemanage, extensions, emailV, usern, pasw, dest, maldo, mal_move_dest
    if os.path.isfile(conf_path):
        loadfile = open(conf_path, "r")
        for lines in loadfile.readlines():  # check files content and take options
            if len(lines.split(":")) > 1:
                arg = lines.split(":")[1].replace("\n", "")
            else:
                arg = ""
            if "directory:" in lines:
                directory = arg
            elif "internal:" in lines:
                internal = arg
            elif "unsafe-func:" in lines:
                unsafef = arg
            elif "uploadfunc" in lines:
                uploadfunc = arg
            elif "uploadform:" in lines:
                uploadform = arg
            elif "filemanage:" in lines:
                filemanage = arg
            elif "extenstion:" in lines:
                extensions = arg
            elif "emailV:" in lines:
                if "False" in arg:
                    arg = False
                else:
                    arg = True
                emailV = arg
            elif "usern:" in lines:
                usern = arg
            elif "passwd:" in lines:
                pasw = arg
            elif "dest:" in lines:
                dest = arg
            elif "maldo:" in lines:
                maldo = arg
            elif "mal_move_dest:" in lines:
                mal_move_dest = arg
        return "OK"

    else:
        return "NOFLIE"


def send_mail(user, paswd, destination, subject, msg):  # send mail function using gmail
    if type(destination) is not list:
        destination = [destination]
        destination = ', '.join(destination)
    else:
        destination = ', '.join(destination)
    message = "From: {0}\n To: {1} \n Subject: {2} \n\n {3}".format(user, destination, subject, msg)
    try:
        server = smtplib.SMTP("smtp.gmail.com", 587)
        server.ehlo()
        server.starttls()
        server.login(user, paswd)
        server.sendmail(user, destination, message)
        server.close()
        return True
    except:
        return False


def startapp(folder, intern, unsff, upfunc, upform, filemng, extns, emil, mldo):  # start scanning in background with arguments . uses 'nohup' command
    global filename
    if bashexec("sudo nohup python3 {0} -d {1} {2} {3} {4} {5} {6} {7} {8} {9} & ".format(filename, folder, intern, unsff, upfunc, upform, filemng, extns, emil, mldo)):
        return True
    else:
        return False


def stopapp():  # search proccesses and find scannings procces then kill them
    global filename
    regex = r"(root[\s]*[0-9]*[\s\S0-9]* -d)"
    psx = bashoutput("ps aux | grep \"sudo nohup python3 {0}\" " .format(filename))
    search = re.search(regex, psx, re.IGNORECASE)
    if search is not None:
        pid = int(search.group().split()[1])
        kill = bashoutput("sudo kill {0}".format(pid))
        if "No such process" not in kill:
            return True
        else:
            return False
    else:
        return False


def bashexec(command):  # executing bash commands and Do Not return that outputs
    process = subprocess.Popen(command.split())
    if process:
        return True
    else:
        return False


def bashoutput(bashc):  # executing bash commands and return that outputs
    basherr = r"(\/bin\/sh: [0-9]*: [a-zA-Z0-9 !@#$%^&*()\[\]{}\-=+<>\/?.,:;'\"\\|_]*: not found)"
    bash = subprocess.getoutput(bashc)
    if re.search(basherr, bash, re.IGNORECASE):  # check error existence
        return False
    else:
        return bash


def get_opt():  # get options from user keyboard and use above functions for handling those.
    global directory, internal, unsafef, uploadfunc, uploadform, filemanage, extensions, colors, emailV, usern, pasw, dest, maldo, mal_move_dest
    config_path = "mal_config.conf"  # config path for saving/loading options
    while True:
        optnum = input(" {0}Available Options : \n 1- Add scanning directory (required) "  # get options from keyboard
              "\n 2- Change internal directory check OPT (Default = OFF)"
              " \n 3- Add files that has unsafe-functions to white list"
              " \n 4- Add files that has upload-functions to white list"
              " \n 5- Add files that has upload-forms to white list"
              " \n 6- Add files that has file-managing-functions to white list"
              " \n 7- Add files that has banned-extensions to white list"
              " \n 8- Add Your gmail for sending and receiving emails"
              " \n 9- What should i do with malwares ? (Default = Just Logging)"
              " \n 10- (Save/Load) Configurations"
              " \n 11- Start scanning in background"
              " \n 12- Stop scanning "
              " \n 13- Credits "
              " \n 14- Exit "
              "\n {1}-->{2}".format(colors["w"],colors["r"],colors["n"]))
        if optnum.isdigit():
            optnum = int(optnum)
        else:
            print(" {0} No Option found ! Please Enter an number \n {1}".format(colors["r"], colors["n"]))
        if optnum == 1:  # check submitted option
            directory = input("{0}Enter directory name (for current directory enter ' . ') \n {1}-->{2} ".format(colors["w"], colors["r"], colors["n"]))
        elif optnum == 2:
            internal = input("{0}Check internal directory ? (y/n) \n {1}-->{2} ".format(colors["w"], colors["r"], colors["n"]))
        elif optnum == 3:
            unsafef = input("{0}Enter file(s) name : (separate each name with ' , ') \n {1}-->{2} ".format(colors["w"], colors["r"], colors["n"]))
        elif optnum == 4:
            uploadfunc = input("{0}Enter file(s) name : (separate each name with ' , ') \n {1}-->{2} ".format(colors["w"], colors["r"], colors["n"]))
        elif optnum == 5:
            uploadform = input("{0}Enter file(s) name : (separate each name with ' , ') \n {1}-->{2} ".format(colors["w"], colors["r"], colors["n"]))
        elif optnum == 6:
            filemanage = input("{0}Enter file(s) name : (separate each name with ' , ') \n {1}-->{2} ".format(colors["w"], colors["r"], colors["n"]))
        elif optnum == 7:
            extensions = input("{0}Enter file(s) name : (separate each name with ' , ') \n {1}-->{2} ".format(colors["w"], colors["r"], colors["n"]))
        elif optnum == 8:  # get email necessary informations
            usern = input(" {0}Enter sender gmail username : \n {1}-->{2} ".format(colors["w"], colors["r"], colors["n"]))
            pasw = input(" {0}Enter sender gmail password : \n {1}-->{2} ".format(colors["w"], colors["r"], colors["n"]))
            dest = str(input(" {0}Enter receiver gmail name(s) : (separate each address with ' , ') \n {1}-->{2} ".format(colors["w"], colors["r"], colors["n"])))
            subject = "Test Email"
            msg = "This is a test mail for testing email sendig !"
            print(" {0} Sending ... \n {1}".format(colors["o"], colors["n"]))
            if send_mail(usern, pasw, dest, subject, msg):
                print(" {0} Email Sent Successfully ! {1}".format(colors["o"], colors["n"]))
                emailV = True
            else:
                print(" {0} Error ! Please re enter Your informations or check your gmail settings ! {1}".format(colors["r"], colors["n"]))
        elif optnum == 9:
            domal = input("{0} 1- Move Malwares to another directory and save log/sendMail .\n 2- Do nothing against malwares and just save log/sendMail .\n {1}-->{2} ".format(colors["w"], colors["r"], colors["n"]))
            if str(domal).isdigit():
                domal = int(domal)
                if domal == 1:
                    mal_move_dest = str(input("{0} Please enter your directory (from this script directory) \n {1}-->{2} ".format(colors["w"], colors["r"], colors["n"])))
                    maldo = "move"
                elif domal == 2:
                    maldo = "log"
                else:
                    pass
            else:
                print("{0} Please Enter A Valid Option !{1}".format(colors["r"], colors["n"]))
        elif optnum == 10:
            saveload = str(input(" {0}1- Save current options \n 2- Load saved options \n {1}-->{2} ".format(colors["w"], colors["r"], colors["n"])))
            if saveload.isdigit():
                saveload = int(saveload)
                if saveload == 1:
                    if saveopt(config_path):
                        print("{0} Configuration successfully saved ! {1}".format(colors["o"], colors["n"]))
                    else:
                        print("{0} Error While saving configurations ! {1}".format(colors["r"], colors["n"]))
                elif saveload == 2:
                    if loadopt(config_path) == "OK":
                        print("{0} Script configuration loaded successfully ! {1}".format(colors["o"], colors["n"]))
                    else:
                        print("{0} No configuration file found ! please save configs first ! {1}".format(colors["r"], colors["n"]))
                else:
                    print("{0} No option found ! please enter again ! {1}".format(colors["r"], colors["n"]))
            else:
                print(" {0} No Option found ! Please Enter an number \n {1}".format(colors["r"], colors["n"]))

        elif optnum == 11:  # collecting and fixing necessary information for start scanning and passing arguments
            if directory == "":
                print(" {0} Please Define an directory for scan ! {1} ".format(colors["r"], colors["n"]))
            if "y" in internal:
                internal = "-i"
            if unsafef != "":
                unsafef = "-f {0}".format(unsafef)
            if uploadfunc != "":
                uploadfunc = "-u {0}".format(uploadfunc)
            if uploadform != "":
                uploadform = "-U {0}".format(uploadform)
            if filemanage != "":
                filemanage = "-F {0}".format(filemanage)
            if extensions != "":
                extensions = "-e {0}".format(extensions)
            if emailV:
                email = "-E true -g {0} -p {1} -r {2}".format(usern, pasw, dest)
            else:
                email = ""
            if maldo == "move":
                maldo = "-m {0} -M {1}".format(maldo, mal_move_dest)
            else:
                maldo = "-m {0}".format(maldo)
            if startapp(directory, internal, unsafef, uploadfunc, uploadform, filemanage, extensions, email, maldo):
                print(" {0}===\n Malware scanning started successfully ! \n  Press Enter to continue \n===\n{1}".format(colors["o"], colors["n"]))
            else:
                print("{0} Error While starting scan :({1}".format(colors["r"], colors["n"]))
        elif optnum == 12:
            if stopapp():
                while stopapp():  # run that function until return false (there is no scanning proccess anymore)
                    pass
                print(" {0}===\n Script Stopped successfully !\n\n{1}".format(colors["o"], colors["n"]))
            else:
                print(" {0}Error While stopping scan :({1}".format(colors["r"], colors["n"]))
        elif optnum == 13:
            print("{0} Coded {1} By Mad Ant - SeedPuller@gmail.com {2} \n Special Thanks to my dear friend {3}Bl4ck MohajeM {4}\n Thanks to all my friends who helped me and didn't in this project .{5}".format(colors["o"], colors["r"], colors["o"], colors["r"], colors["o"], colors["n"]))
        elif optnum == 14:
            break
        else:
            print("No options found")
get_opt()

import subprocess
import re
import sys
import smtplib
import os
# setting necessary vars
green = "\033[32m"
normal = "\033[m"
red = "\033[31m"
white = "\033[37m"
orange = "\033[33m"
print('%s  ┌─────────────────────┐\n  │                     │\n  │m     m m    m  mmmm │\n  │#  #  # ##  ## #"   "│\n  │" #"# # # ## # "#mmm │\n  │ ## ##" # "" #     "#│\n  │ #   #  #    # "mmm#"│\n  │                     │\n  │                     │\n  └─────────────────────┘%s' % (red, normal))
print(" %s [+]  Web Malware Scanner Ver 1.5\n\n%s" % (green, normal))
directory = ""
internal = ""
unsafef = ""
uploadfunc = ""
uploadform = ""
filemanage = ""
extensions = ""
emailV = False
usern = ""
pasw = ""
dest = ""
maldo = "log"
mal_move_dest = ""
filename = "mal_detect.py"

# defining functions


def saveopt(conf_path):  # saving options in 'conf_path'
    if os.path.isfile(conf_path):
        os.remove(conf_path)  # if option has been exsits , remove it to save new options
    savefile = open(conf_path, "w")
    if savefile.write("directory:%s\ninternal:%s\nunsafe-func:%s\nuploadfunc:%s\nuploadform:%s\nfilemanage:%s\nextenstion:%s\nemailV:%s\nusern:%s\npasswd:%s\ndest:%s\nmaldo:%s\nmal_move_dest:%s" % (directory, internal, unsafef, uploadfunc, uploadform, filemanage, extensions, emailV, usern, pasw, dest, maldo, mal_move_dest)):
        return True
    else:
        return False


def loadopt(conf_path):  # load options from 'conf_path'
    global directory, internal, unsafef, uploadfunc, uploadform, filemanage, extensions, emailV, usern, pasw, dest, maldo, mal_move_dest
    if os.path.isfile(conf_path):
        loadfile = open(conf_path, "r")
        for lines in loadfile.readlines():  # check files content and take options
            if len(lines.split(":")) > 1:
                arg = lines.split(":")[1].replace("\n", "")
            else:
                arg = ""
            if "directory:" in lines:
                directory = arg
            elif "internal:" in lines:
                internal = arg
            elif "unsafe-func:" in lines:
                unsafef = arg
            elif "uploadfunc" in lines:
                uploadfunc = arg
            elif "uploadform:" in lines:
                uploadform = arg
            elif "filemanage:" in lines:
                filemanage = arg
            elif "extenstion:" in lines:
                extensions = arg
            elif "emailV:" in lines:
                if "False" in arg:
                    arg = False
                else:
                    arg = True
                emailV = arg
            elif "usern:" in lines:
                usern = arg
            elif "passwd:" in lines:
                pasw = arg
            elif "dest:" in lines:
                dest = arg
            elif "maldo:" in lines:
                maldo = arg
            elif "mal_move_dest:" in lines:
                mal_move_dest = arg
        return "OK"

    else:
        return "NOFLIE"


def send_mail(user, paswd, destination, subject, msg):  # send mail function using gmail
    if type(destination) is not list:
        destination = [destination]
        destination = ', '.join(destination)
    else:
        destination = ', '.join(destination)
    message = "From: %s\n To: %s \n Subject: %s \n\n %s" % (user, destination, subject, msg)
    try:
        server = smtplib.SMTP("smtp.gmail.com", 587)
        server.ehlo()
        server.starttls()
        server.login(user, paswd)
        server.sendmail(user, destination, message)
        server.close()
        return True
    except:
        return False


def startapp(folder, intern, unsff, upfunc, upform, filemng, extns, emil, mldo):  # start scanning in background with arguments . uses 'nohup' command
    global filename
    if bashexec("sudo nohup python3 %s -d %s %s %s %s %s %s %s %s %s & " % (filename, folder, intern, unsff, upfunc, upform, filemng, extns, emil, mldo)):
        return True
    else:
        return False


def stopapp():  # search proccesses and file scannings procces then kill them
    global filename
    regex = r"(root[\s]*[0-9]*[\s\S0-9]* -d)"
    psx = bashoutput("ps aux | grep \"sudo nohup python3 %s\" " % filename)
    search = re.search(regex, psx, re.IGNORECASE)
    if search is not None:
        pid = int(search.group().split()[1])
        kill = bashoutput("sudo kill %d" % pid)
        if "No such process" not in kill:
            return True
        else:
            return False
    else:
        return False


def bashexec(command):  # executing bash commands and Do Not return that outputs
    process = subprocess.Popen(command.split())
    if process:
        return True
    else:
        return False


def bashoutput(bashc):  # executing bash commands and return that outputs
    basherr = r"(\/bin\/sh: [0-9]*: [a-zA-Z0-9 !@#$%^&*()\[\]{}\-=+<>\/?.,:;'\"\\|_]*: not found)"
    bash = subprocess.getoutput(bashc)
    if re.search(basherr, bash, re.IGNORECASE):  # check error existence
        return False
    else:
        return bash


def get_opt():  # get options from user keyboard and use above functions for handling those.
    global directory, internal, unsafef, uploadfunc, uploadform, filemanage, extensions, green, red, normal, orange, white, emailV, usern, pasw, dest, maldo, mal_move_dest
    config_path = "mal_config.conf"  # config path for saving/loading options
    optnum = input(" %sAvailable Options : \n 1- Add scanning directory (required) "  # get options from keyboard
          "\n 2- Change internal directory check OPT (Default = OFF)"
          " \n 3- Add files that has unsafe-functions to white list"
          " \n 4- Add files that has upload-functions to white list"
          " \n 5- Add files that has upload-forms to white list"
          " \n 6- Add files that has file-managing-functions to white list"
          " \n 7- Add files that has banned-extensions to white list"
          " \n 8- Add Your gmail for sending and receiving emails"
          " \n 9- What should i do with malwares ?"
          " \n 10- (Save/Load) Configurations"
          " \n 11- Start scanning in background"
          " \n 12- Stop scanning "
          " \n 13- Credits "
          " \n 14- Exit "
          "\n %s-->%s" % (white,red,normal))
    if optnum.isdigit():
        optnum = int(optnum)
    else:
        print(" %s No Option found ! Please Enter an number \n %s" % (red, normal))
        get_opt()
    if optnum == 1:  # check submitted option
        directory = input("%sEnter directory name (for current directory enter ' . ') \n %s-->%s " % (white, red, normal))
        get_opt()
    elif optnum == 2:
        internal = input("%sCheck internal directory ? (y/n) \n %s-->%s " % (white, red, normal))
        get_opt()
    elif optnum == 3:
        unsafef = input("%sEnter file(s) name : (separate each name with ' , ') \n %s-->%s " % (white, red, normal))
        get_opt()
    elif optnum == 4:
        uploadfunc = input("%sEnter file(s) name : (separate each name with ' , ') \n %s-->%s " % (white, red, normal))
        get_opt()
    elif optnum == 5:
        uploadform = input("%sEnter file(s) name : (separate each name with ' , ') \n %s-->%s " % (white, red, normal))
        get_opt()
    elif optnum == 6:
        filemanage = input("%sEnter file(s) name : (separate each name with ' , ') \n %s-->%s " % (white, red, normal))
        get_opt()
    elif optnum == 7:
        extensions = input("%sEnter file(s) name : (separate each name with ' , ') \n %s-->%s " % (white, red, normal))
        get_opt()
    elif optnum == 8:  # get email necessary informations
        usern = input("Enter sender gmail username : \n %s-->%s " % (red, normal))
        pasw = input("Enter sender gmail password : \n %s-->%s " % (red, normal))
        dest = str(input("Enter receiver gmail name(s) : (separate each address with ' , ') \n %s-->%s " % (red, normal)))
        subject = "Test Email"
        msg = "This is a test mail for testing email sendig !"
        print(" %s Sending ... \n %s" % (orange, normal))
        if send_mail(usern, pasw, dest, subject, msg):
            print(" %s Email Sent Successfully ! %s" % (orange, normal))
            emailV = True
            get_opt()
        else:
            print(" %s Error ! Please re enter Your informations or check your gmail settings ! %s" % (red, normal))
            get_opt()
    elif optnum == 9:
        domal = input("%s 1- Move Malwares to another directory and save log/sendMail .\n 2- Do nothing against malwares and just save log/sendMail .\n %s-->%s " % (white, red, normal))
        if str(domal).isdigit():
            domal = int(domal)
            if domal == 1:
                mal_move_dest = str(input("%s Please enter your directory (from this script directory) \n %s-->%s " % (white, red, normal)))
                maldo = "move"
                get_opt()
            elif domal == 2:
                maldo = "log"
                get_opt()
            else:
                pass
        else:
            print("%s Please Enter A Valid Option !%s" % (red, normal))
            get_opt()
    elif optnum == 10:
        saveload = str(input(" %s1- Save current options \n 2- Load saved options \n %s-->%s " % (white, red, normal)))
        if saveload.isdigit():
            saveload = int(saveload)
            if saveload == 1:
                if saveopt(config_path):
                    print("%s Configuration successfully saved ! %s" % (orange, normal))
                    get_opt()
                else:
                    print("%s Error While saving configurations ! %s" % (red, normal))
            elif saveload == 2:
                if loadopt(config_path) == "OK":
                    print("%s Script configuration loaded successfully ! %s" % (orange, normal))
                    get_opt()
                else:
                    print("%s No configuration file found ! please save configs first ! %s" % (red, normal))
                    get_opt()
            else:
                print("%s No option found ! please enter again ! %s" % (red, normal))
                get_opt()
        else:
            print(" %s No Option found ! Please Enter an number \n %s" % (red, normal))
            get_opt()

    elif optnum == 11:  # collecting and fixing necessary information for start scanning and passing arguments
        if directory == "":
            print(" %s Please Define an directory for scan ! %s " % (red, normal))
            get_opt()
        if "y" in internal:
            internal = "-i"
        if unsafef != "":
            unsafef = "-f %s" % unsafef
        if uploadfunc != "":
            uploadfunc = "-u %s" % uploadfunc
        if uploadform != "":
            uploadform = "-U %s" % uploadform
        if filemanage != "":
            filemanage = "-F %s" % filemanage
        if extensions != "":
            extensions = "-e %s" % extensions
        if emailV:
            email = "-E true -g %s -p %s -r %s" % (usern, pasw, dest)
        else:
            email = ""
        if maldo == "move":
            maldo = "-m %s -M %s" % (maldo, mal_move_dest)
        else:
            maldo = "-m %s" % maldo
        if startapp(directory, internal, unsafef, uploadfunc, uploadform, filemanage, extensions, email, maldo):
            print(" %s Malware scanning started successfully ! \n Press Enter to continue %s" % (orange, normal))
            get_opt()
        else:
            print("Error While starting scan :(")
    elif optnum == 12:
        if stopapp():
            while stopapp():  # run that function until return false (there is no scanning proccess anymore)
                pass
            print(" %s Script Stopped successfully !%s" % (orange, normal))
            get_opt()
        else:
            print(" %sError While stopping scan :(%s" % (red, normal))
            get_opt()
    elif optnum == 13:
        print("%s Coded %s By Mad Ant - SeedPuller@gmail.com %s \n Special Thanks to my dear friend %sBl4ck MohajeM %s\n Thanks to all my friends who helped me and didn't in this project .%s" % (orange, red, orange, red, orange, normal))
    elif optnum == 14:
        sys.exit()
    else:
        print("No options found")
        get_opt()
get_opt()
